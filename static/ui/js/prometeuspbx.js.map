{"version":3,"file":"prometeuspbx.js","mappings":"mBASO,MAAMA,EAIHC,eAA4C,CAClDC,eAAe,EACfC,iBAAkB,KAGpBC,YAAYC,EAAaC,GACvBC,KAAKC,KAAOH,EACZE,KAAKD,QAAU,IAAKC,KAAKN,kBAAmBK,GAE5CC,KAAKE,aAGPA,aACEF,KAAKG,OAAS,IAAIC,UAAUJ,KAAKC,MACjCD,KAAKG,OAAOE,OAASL,KAAKM,OAC1BN,KAAKG,OAAOI,QAAUP,KAAKQ,QAC3BR,KAAKG,OAAOM,QAAUT,KAAKU,QAC3BV,KAAKG,OAAOQ,UAAYX,KAAKY,UAG/BN,OAAUO,GACDb,KAAKD,QAAQO,QAAUN,KAAKD,QAAQO,OAAOO,GAGpDL,QAAWK,IACLb,KAAKD,QAAQJ,eACfmB,WAAWd,KAAKE,WAAYF,KAAKD,QAAQH,kBAGpCI,KAAKD,QAAQS,SAAWR,KAAKD,QAAQS,QAAQK,IAGtDH,QAAWG,GACFb,KAAKD,QAAQW,SAAWV,KAAKD,QAAQW,QAAQG,GAGtDD,UAAaC,GACJb,KAAKD,QAAQa,WAAaZ,KAAKD,QAAQa,UAAUC,GAG1DE,YAAc,CAACC,EAAcC,IACpBjB,KAAKG,OAAOe,KACjBC,KAAKC,UAAU,CACbJ,KAAAA,EACAC,KAAAA,KCvDD,SAASI,EAAcR,GAC5BS,QAAQC,IAAIV,GCAdW,OAAOC,eAAiB,CAAEhC,OAAF,EAAUiC,aDG3B,SAAsBC,GAC3B,MAAMxB,EAAS,IAAIV,EAAOkC,EAAW,CACnCrB,OAAQ,KACNH,EAAOY,YAAY,QAAS,UAE9BH,UAAWS,O","sources":["webpack://prometeuspbx_websocket/./src/Socket/index.ts","webpack://prometeuspbx_websocket/./src/UI/index.ts","webpack://prometeuspbx_websocket/./src/index.js"],"sourcesContent":["export type DashboardWebSocketOptions = {\n  autoReconnect: boolean;\n  reconnectTimeout: number;\n  onOpen?: (event: Event) => any;\n  onClose?: (event: CloseEvent) => any;\n  onError?: (event: Event) => any;\n  onMessage?: (event: MessageEvent) => any;\n};\n\nexport class Socket {\n  private readonly _url: string;\n  private socket: WebSocket;\n  private options: DashboardWebSocketOptions;\n  private defaultOptions: DashboardWebSocketOptions = {\n    autoReconnect: true,\n    reconnectTimeout: 5000\n  };\n\n  constructor(url: string, options: Partial<DashboardWebSocketOptions>) {\n    this._url = url;\n    this.options = { ...this.defaultOptions, ...options };\n\n    this.initialize();\n  }\n\n  initialize() {\n    this.socket = new WebSocket(this._url);\n    this.socket.onopen = this.onOpen;\n    this.socket.onclose = this.onClose;\n    this.socket.onerror = this.onError;\n    this.socket.onmessage = this.onMessage;\n  }\n\n  onOpen = (event: Event) => {\n    return this.options.onOpen && this.options.onOpen(event);\n  };\n\n  onClose = (event: CloseEvent) => {\n    if (this.options.autoReconnect) {\n      setTimeout(this.initialize, this.options.reconnectTimeout);\n    }\n\n    return this.options.onClose && this.options.onClose(event);\n  };\n\n  onError = (event: Event) => {\n    return this.options.onError && this.options.onError(event);\n  };\n\n  onMessage = (event: MessageEvent) => {\n    return this.options.onMessage && this.options.onMessage(event);\n  };\n\n  sendMessage = (type: string, data: any) => {\n    return this.socket.send(\n      JSON.stringify({\n        type,\n        data\n      })\n    );\n  };\n}\n","import { Socket } from \"../Socket\";\n\nexport function handleMessage(event: MessageEvent) {\n  console.log(event);\n}\n\nexport function initializeUI(socketUrl: string) {\n  const socket = new Socket(socketUrl, {\n    onOpen: () => {\n      socket.sendMessage(\"teste\", \"teste\");\n    },\n    onMessage: handleMessage\n  });\n}\n","import { Socket } from \"./Socket\";\nimport { initializeUI } from \"./UI\";\n\nwindow.PrometeusPbxUi = { Socket, initializeUI };\n"],"names":["Socket","defaultOptions","autoReconnect","reconnectTimeout","constructor","url","options","this","_url","initialize","socket","WebSocket","onopen","onOpen","onclose","onClose","onerror","onError","onmessage","onMessage","event","setTimeout","sendMessage","type","data","send","JSON","stringify","handleMessage","console","log","window","PrometeusPbxUi","initializeUI","socketUrl"],"sourceRoot":""}